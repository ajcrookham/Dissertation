GE2010 <- GE2010[GE2010$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2010) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2015 <- read_excel('GE2015.xlsx', sheet = 'Data', skip = 2)
GE2015 <- GE2015[GE2015$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2015) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2017 <- read_excel('GE2017.xlsx', sheet = 'Data', skip = 2)
GE2017 <- GE2017[GE2017$`Country name` == 'England', c(3,4,11:15,17:22,30:31)]
names(GE2017) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other', 'Of which other winner')
GE2019 <- read_excel('GE2019.xlsx', sheet = 'Data', skip = 2)
GE2019 <- GE2019[GE2019$`Country name` == 'England', c(3,4,11:15,17:22,30,31)]
names(GE2019) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'BRX', 'Green', 'Other', 'Of which other winner')
GE2024 <- read_excel('GE2024.xlsx', sheet = 'Data', skip = 2)
GE2024 <- GE2024[GE2024$`Country name` == 'England', c(3,4,10:14,16:21,29,30)]
names(GE2024) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'RFM', 'Green', 'Other', 'Of which other winner')
sheets = list('2024' = GE2024, '2019' = GE2019,
'2017' = GE2017, '2015' = GE2015, '2010' = GE2010)
GE2019$Constituency[233] <- 'Isle of Wight'
GE2019$Constituency[448] <- 'Stratford-on-Avon'
write.xlsx(sheets, 'Election Results.xlsx', firstRow = TRUE, firstCol = TRUE)
Brexit_Results <- read_excel('Brexit Results.xlsx', sheet = 'DATA', skip = 5)
Brexit_Results <- drop_na(Brexit_Results)
Brexit_Results <- Brexit_Results[Brexit_Results$Constituency %in% GE2017$Constituency, c(2,6)]
Brexit_Results <- with(Brexit_Results, Brexit_Results[order(Brexit_Results$Constituency), ])
names(Brexit_Results) <- c('Constituency', 'Leave')
results_2010 <- read_excel('Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
results_2019$Constituency[233] <- 'Isle of Wight'
results_2019$Constituency[448] <- 'Stratford-on-Avon'
# Load required packages
library(readxl)
library(openxlsx)
library(tidyr)
GE2010 <- read_excel('GE2010.xlsx', sheet = 'Data', skip = 2)
GE2010 <- GE2010[GE2010$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2010) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2015 <- read_excel('GE2015.xlsx', sheet = 'Data', skip = 2)
GE2015 <- GE2015[GE2015$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2015) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2017 <- read_excel('GE2017.xlsx', sheet = 'Data', skip = 2)
GE2017 <- GE2017[GE2017$`Country name` == 'England', c(3,4,11:15,17:22,30:31)]
names(GE2017) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other', 'Of which other winner')
GE2019 <- read_excel('GE2019.xlsx', sheet = 'Data', skip = 2)
GE2019 <- GE2019[GE2019$`Country name` == 'England', c(3,4,11:15,17:22,30,31)]
names(GE2019) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'BRX', 'Green', 'Other', 'Of which other winner')
GE2019$Constituency[233] <- 'Isle of Wight'
GE2019$Constituency[448] <- 'Stratford-on-Avon'
GE2024 <- read_excel('GE2024.xlsx', sheet = 'Data', skip = 2)
GE2024 <- GE2024[GE2024$`Country name` == 'England', c(3,4,10:14,16:21,29,30)]
names(GE2024) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'RFM', 'Green', 'Other', 'Of which other winner')
sheets = list('2024' = GE2024, '2019' = GE2019,
'2017' = GE2017, '2015' = GE2015, '2010' = GE2010)
write.xlsx(sheets, 'Election Results.xlsx', firstRow = TRUE, firstCol = TRUE)
Brexit_Results <- read_excel('Brexit Results.xlsx', sheet = 'DATA', skip = 5)
Brexit_Results <- drop_na(Brexit_Results)
Brexit_Results <- Brexit_Results[Brexit_Results$Constituency %in% GE2017$Constituency, c(2,6)]
Brexit_Results <- with(Brexit_Results, Brexit_Results[order(Brexit_Results$Constituency), ])
names(Brexit_Results) <- c('Constituency', 'Leave')
results_2010 <- read_excel('Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
GE2010 <- read_excel('GE2010.xlsx', sheet = 'Data', skip = 2)
GE2010 <- GE2010[GE2010$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2010) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2015 <- read_excel('GE2015.xlsx', sheet = 'Data', skip = 2)
GE2015 <- GE2015[GE2015$`Country name` == 'England', c(3,4,11:15,17:22,30)]
names(GE2015) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other')
GE2017 <- read_excel('GE2017.xlsx', sheet = 'Data', skip = 2)
GE2017 <- GE2017[GE2017$`Country name` == 'England', c(3,4,11:15,17:22,30:31)]
names(GE2017) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'UKIP', 'Green', 'Other', 'Of which other winner')
GE2019 <- read_excel('GE2019.xlsx', sheet = 'Data', skip = 2)
GE2019 <- GE2019[GE2019$`Country name` == 'England', c(3,4,11:15,17:22,30,31)]
names(GE2019) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'BRX', 'Green', 'Other', 'Of which other winner')
GE2019$Constituency[233] <- 'Isle of Wight'
GE2019$Constituency[448] <- 'Stratford-on-Avon'
GE2024 <- read_excel('GE2024.xlsx', sheet = 'Data', skip = 2)
GE2024 <- GE2024[GE2024$`Country name` == 'England', c(3,4,10:14,16:21,29,30)]
names(GE2024) <- c('Constituency', 'Region', 'Result', 'Winner', 'Second', 'Electorate', 'Total', 'Majority', 'Con',
'Lab', 'LD', 'RFM', 'Green', 'Other', 'Of which other winner')
Brexit_Results <- read_excel('Brexit Results.xlsx', sheet = 'DATA', skip = 5)
Brexit_Results <- drop_na(Brexit_Results)
Brexit_Results <- Brexit_Results[Brexit_Results$Constituency %in% GE2017$Constituency, c(2,6)]
Brexit_Results <- with(Brexit_Results, Brexit_Results[order(Brexit_Results$Constituency), ])
names(Brexit_Results) <- c('Constituency', 'Leave')
sheets = list('2024' = results_2024, '2019' = results_2019, '2017' = results_2017,
'2015' = results_2015, '2010' = results_2010, 'Brexit' = Brexit_Results)
write.xlsx(sheets, 'Election Results.xlsx', firstRow = TRUE, firstCol = TRUE)
sheets = list('2024' = GE2024, '2019' = GE2019, '2017' = GE2017,
'2015' = GE2015, '2010' = GE2010, 'Brexit' = Brexit_Results)
write.xlsx(sheets, 'Election Results.xlsx', firstRow = TRUE, firstCol = TRUE)
setwd("~/Project/Election Data/Election Results")
setwd("~/Project/Election Data/Election Results")
# Load required packages
library(readxl)
# Load in original results from our cleaned up spreadsheet
results_2010 <- read_excel('Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
results_brexit <- read_excel('Election Results.xlsx', sheet = 'Brexit')
setwd("~/Project/Election Data/Boundary Changes")
# Load in raw data file for boundary changes
Boundary_changes_data_file <- read_excel("Boundary_changes_data_file.xlsx", sheet = "All overlaps", skip = 1)
# Load in raw data file for boundary changes
Boundary_changes_data_file <- read_excel("Boundary_changes_data_file.xlsx", sheet = "All overlaps", skip = 1)
# Load in the 2019 General Election results
Election_Results <- read_excel('~/Seats/Election Results.xlsx', sheet = '2019')
# Remove any unnecessary constituencies from boundary changes file
Boundary_changes <- Boundary_changes_data_file[Boundary_changes_data_file$`Current constituency name` %in% Election_Results$Constituency, ]
# Save the cleaned up boundary changes data as a CSV file
write.csv(Boundary_changes, 'Boundary Changes.csv')
# Load in the 2019 General Election results
Election_Results <- read_excel('~/Election Data/Election Results.xlsx', sheet = '2019')
# Load in the 2019 General Election results
Election_Results <- read_excel('~/Election Data/Election Results/Election Results.xlsx', sheet = '2019')
# Load in the 2019 General Election results
Election_Results <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2019')
# Remove any unnecessary constituencies from boundary changes file
Boundary_changes <- Boundary_changes_data_file[Boundary_changes_data_file$`Current constituency name` %in% Election_Results$Constituency, ]
# Save the cleaned up boundary changes data as a CSV file
write.csv(Boundary_changes, 'Boundary Changes.csv')
setwd("~/Project/Election Data/Election Results")
# Load required packages
library(readxl)
# Load in original results from our cleaned up spreadsheet
results_2010 <- read_excel('Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
results_brexit <- read_excel('Election Results.xlsx', sheet = 'Brexit')
boundary_change <- read.csv('~/Project/Election Data/Boundary Changes/Boundary Changes.csv')
boundary_change <- boundary_change[, c(2,4,9,10)]
parties <- c('Con', 'Lab', 'LD', 'RFM', 'Green', 'Other')
results_2010_new <- data.frame(matrix(nrow = 543, ncol = 12))
names(results_2010_new) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
results_2010_new$Constituency <- results_2024$Constituency
results_2010_new$Region <- results_2024$Region
for (i in 1:543) {
seat <- results_2024$Constituency[i]
region <- results_2024$Region[i]
old_to_new <- boundary_change[boundary_change$New.constituency.name == seat, ]
old_to_new <- with(old_to_new, old_to_new[order(Current.constituency.name), ])
results_2010_2 <- results_2010[results_2010$Constituency %in% old_to_new$Current.constituency.name, ]
results_2010_3 <- as.numeric(colSums(results_2010_2[, c(6, 9:14)] * old_to_new$Percentage.of.old.constituency.in.this.segment..population.))
results_2010_new$Con[i] <- round(results_2010_3[2], 0)
results_2010_new$Lab[i] <- round(results_2010_3[3], 0)
results_2010_new$LD[i] <- round(results_2010_3[4], 0)
results_2010_new$RFM[i] <- round(results_2010_3[5], 0)
results_2010_new$Green[i] <- round(results_2010_3[6], 0)
results_2010_new$Other[i] <- round(results_2010_3[7], 0)
results_2010_new$Total[i] <-  results_2010_new$Other[i] +  results_2010_new$Con[i] +  results_2010_new$Lab[i] +  results_2010_new$LD[i] +  results_2010_new$RFM[i] +  results_2010_new$Green[i]
results_2010_new$Electorate[i] <- round(results_2010_3[1], 0)
winner_index <- which.max(results_2010_3[2:7])
results_2010_new$Winner[i] <- parties[winner_index]
ordered_results <- sort(results_2010_3[2:7], decreasing = TRUE)
results_2010_new$Majority[i] <- round(ordered_results[1] - ordered_results[2], 0)
}
View(boundary_change)
boundary_change <- read.csv('~/Project/Election Data/Boundary Changes/Boundary Changes.csv')
View(boundary_change)
View(boundary_change)
boundary_change <- boundary_change[, c(3,5,10,11)]
parties <- c('Con', 'Lab', 'LD', 'RFM', 'Green', 'Other')
results_2010_new <- data.frame(matrix(nrow = 543, ncol = 12))
names(results_2010_new) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
results_2010_new$Constituency <- results_2024$Constituency
results_2010_new$Region <- results_2024$Region
for (i in 1:543) {
seat <- results_2024$Constituency[i]
region <- results_2024$Region[i]
old_to_new <- boundary_change[boundary_change$New.constituency.name == seat, ]
old_to_new <- with(old_to_new, old_to_new[order(Current.constituency.name), ])
results_2010_2 <- results_2010[results_2010$Constituency %in% old_to_new$Current.constituency.name, ]
results_2010_3 <- as.numeric(colSums(results_2010_2[, c(6, 9:14)] * old_to_new$Percentage.of.old.constituency.in.this.segment..population.))
results_2010_new$Con[i] <- round(results_2010_3[2], 0)
results_2010_new$Lab[i] <- round(results_2010_3[3], 0)
results_2010_new$LD[i] <- round(results_2010_3[4], 0)
results_2010_new$RFM[i] <- round(results_2010_3[5], 0)
results_2010_new$Green[i] <- round(results_2010_3[6], 0)
results_2010_new$Other[i] <- round(results_2010_3[7], 0)
results_2010_new$Total[i] <-  results_2010_new$Other[i] +  results_2010_new$Con[i] +  results_2010_new$Lab[i] +  results_2010_new$LD[i] +  results_2010_new$RFM[i] +  results_2010_new$Green[i]
results_2010_new$Electorate[i] <- round(results_2010_3[1], 0)
winner_index <- which.max(results_2010_3[2:7])
results_2010_new$Winner[i] <- parties[winner_index]
ordered_results <- sort(results_2010_3[2:7], decreasing = TRUE)
results_2010_new$Majority[i] <- round(ordered_results[1] - ordered_results[2], 0)
}
convert_ge_results <- function(Year) {
original_results <- read_excel('Election Results.xlsx', sheet = as.character(Year))
new_results <- data.frame(matrix(nrow = 543, ncol = 12))
names(new_results) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
return(original_results)
}
convert_ge_results(2010)
convert_ge_results <- function(Year) {
original_results <- read_excel('Election Results.xlsx', sheet = as.character(Year))
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
boundary_change <- read.csv('~/Project/Election Data/Boundary Changes/Boundary Changes.csv')
boundary_change <- boundary_change[, c(3, 5, 10, 11)]
new_results <- data.frame(matrix(nrow = 543, ncol = 12))
names(new_results) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
new_results$Constituency <- results_2024$Constituency
new_results$Region <- results_2024$Region
for (i in 1:543) {
seat <- results_2024$Constituency[i]
old_to_new <- boundary_change[boundary_change$New.constituency.name == seat, ]
old_to_new <- with(old_to_new, old_to_new[order(Current.constituency.name), ])
subset_of_original_results <- original_results[original_results$Constituency %in% old_to_new$Current.constituency.name, ]
adjusted_results <- as.numeric(colSums(subset_of_original_results[, c(6, 9:14)] * old_to_new$Percentage.of.old.constituency.in.this.segment..population.))
new_results$Con[i] <- round(adjusted_results[2], 0)
new_results$Lab[i] <- round(adjusted_results[3], 0)
new_results$LD[i] <- round(adjusted_results[4], 0)
new_results$RFM[i] <- round(adjusted_results[5], 0)
new_results$Green[i] <- round(adjusted_results[6], 0)
new_results$Other[i] <- round(adjusted_results[7], 0)
new_results$Total[i] <- adjusted_results$Con[i] +  adjusted_results$Lab[i] +  adjusted_results$LD[i] +  adjusted_results$RFM[i] +  adjusted_results$Green[i] + adjusted_results$Other[i]
new_results$Electorate[i] <- round(adjusted_results[1], 0)
winner_index <- which.max(adjusted_results[2:7])
new_results$Winner[i] <- parties[winner_index]
ordered_results <- sort(adjusted_results[2:7], decreasing = TRUE)
new_results$Majority[i] <- round(ordered_results[1] - ordered_results[2], 0)
}
}
convert_ge_results(2010)
convert_ge_results <- function(Year) {
original_results <- read_excel('Election Results.xlsx', sheet = as.character(Year))
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
boundary_change <- read.csv('~/Project/Election Data/Boundary Changes/Boundary Changes.csv')
boundary_change <- boundary_change[, c(3, 5, 10, 11)]
new_results <- data.frame(matrix(nrow = 543, ncol = 12))
names(new_results) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
new_results$Constituency <- results_2024$Constituency
new_results$Region <- results_2024$Region
for (i in 1:543) {
seat <- results_2024$Constituency[i]
old_to_new <- boundary_change[boundary_change$New.constituency.name == seat, ]
old_to_new <- with(old_to_new, old_to_new[order(Current.constituency.name), ])
subset_of_original_results <- original_results[original_results$Constituency %in% old_to_new$Current.constituency.name, ]
adjusted_results <- as.numeric(colSums(subset_of_original_results[, c(6, 9:14)] * old_to_new$Percentage.of.old.constituency.in.this.segment..population.))
new_results$Con[i] <- round(adjusted_results[2], 0)
new_results$Lab[i] <- round(adjusted_results[3], 0)
new_results$LD[i] <- round(adjusted_results[4], 0)
new_results$RFM[i] <- round(adjusted_results[5], 0)
new_results$Green[i] <- round(adjusted_results[6], 0)
new_results$Other[i] <- round(adjusted_results[7], 0)
new_results$Total[i] <- new_results$Con[i] +  new_results$Lab[i] +  new_results$LD[i] +  new_results$RFM[i] + new_results$Green[i] + new_results$Other[i]
new_results$Electorate[i] <- round(adjusted_results[1], 0)
winner_index <- which.max(adjusted_results[2:7])
new_results$Winner[i] <- parties[winner_index]
ordered_results <- sort(adjusted_results[2:7], decreasing = TRUE)
new_results$Majority[i] <- round(ordered_results[1] - ordered_results[2], 0)
}
}
convert_ge_results(2010)
test <- convert_ge_results(2010)
convert_ge_results <- function(Year) {
original_results <- read_excel('Election Results.xlsx', sheet = as.character(Year))
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
boundary_change <- read.csv('~/Project/Election Data/Boundary Changes/Boundary Changes.csv')
boundary_change <- boundary_change[, c(3, 5, 10, 11)]
new_results <- data.frame(matrix(nrow = 543, ncol = 12))
names(new_results) <- c('Constituency', 'Region', 'Winner', 'Majority',
'Con', 'Lab', 'LD', 'RFM', 'Green', 'Other', 'Total',
'Electorate')
new_results$Constituency <- results_2024$Constituency
new_results$Region <- results_2024$Region
for (i in 1:543) {
seat <- results_2024$Constituency[i]
old_to_new <- boundary_change[boundary_change$New.constituency.name == seat, ]
old_to_new <- with(old_to_new, old_to_new[order(Current.constituency.name), ])
subset_of_original_results <- original_results[original_results$Constituency %in% old_to_new$Current.constituency.name, ]
adjusted_results <- as.numeric(colSums(subset_of_original_results[, c(6, 9:14)] * old_to_new$Percentage.of.old.constituency.in.this.segment..population.))
new_results$Con[i] <- round(adjusted_results[2], 0)
new_results$Lab[i] <- round(adjusted_results[3], 0)
new_results$LD[i] <- round(adjusted_results[4], 0)
new_results$RFM[i] <- round(adjusted_results[5], 0)
new_results$Green[i] <- round(adjusted_results[6], 0)
new_results$Other[i] <- round(adjusted_results[7], 0)
new_results$Total[i] <- new_results$Con[i] +  new_results$Lab[i] +  new_results$LD[i] +  new_results$RFM[i] + new_results$Green[i] + new_results$Other[i]
new_results$Electorate[i] <- round(adjusted_results[1], 0)
winner_index <- which.max(adjusted_results[2:7])
new_results$Winner[i] <- parties[winner_index]
ordered_results <- sort(adjusted_results[2:7], decreasing = TRUE)
new_results$Majority[i] <- round(ordered_results[1] - ordered_results[2], 0)
}
return(new_results)
}
test <- convert_ge_results(2010)
test$
results_2010_new <- data.frame(matrix(nrow = 543, ncol = 12))
test$Con - results_2010_new
test$Con - results_2010_new$Con
test$Total - results_2010_new$Total
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
# Reorder the columns in the 2024 General Election results to match the rest
results_2024 <- read_excel('Election Results.xlsx', sheet = '2024')
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
source("~/Project/Election Data/Election Results/Election Results New Boundaries Code.R", echo=TRUE)
blue_wall_builder <- function(new_map = TRUE) {
# Load in the results for the correct electoral map
if (new_map) {
# Results on the 2024 electoral map
results_2010 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2010')
results_2015 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2015')
results_2017 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2017')
results_2019 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2019')
results_brexit <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = 'Brexit')
} else {
# Results on the 2010 electoral map
results_2010 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2019')
results_brexit <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = 'Brexit')
}
# Make sure that all of the results are in the same order
results_2010 <- with(results_2010, results_2010[order(results_2015$Constituency), ])
results_2015 <- with(results_2015, results_2015[order(results_2015$Constituency), ])
results_2017 <- with(results_2017, results_2017[order(results_2015$Constituency), ])
results_2019 <- with(results_2019, results_2019[order(results_2015$Constituency), ])
results_brexit <- with(results_brexit, results_brexit[order(results_brexit$Constituency), ])
# Create empty vectors to be filled with information about Blue Wall seats
blue_wall_seats <- c()
blue_wall_region <- c()
blue_wall_2010 <- c()
blue_wall_2015 <- c()
blue_wall_2017 <- c()
blue_wall_2019 <- c()
blue_wall_brexit <- c()
total <- length(results_2010$Constituency)
for (i in 1:total){
# Compute the Conservative vote share for each year and test if greater than 50%
test_2010 <- results_2010$Con[i] / results_2010$Total[i] >= 0.5
test_2015 <- results_2015$Con[i] / results_2015$Total[i] >= 0.5
test_2017 <- results_2017$Con[i] / results_2017$Total[i] >= 0.5
test_2019 <- results_2019$Con[i] / results_2019$Total[i] >= 0.5
# Test if constituency voted to remain more than the whole of the nation
test_brexit <- results_brexit$Leave[i] < (17410742 / (17410742 + 16141241))
# Apply tests and add constituency to blue wall vectors if all tests are true
if (test_2010 & test_2015 & test_2017 & test_2019 & test_brexit) {
blue_wall_seats <- append(blue_wall_seats, results_2015$Constituency[i])
blue_wall_region <- append(blue_wall_region, results_2015$Region[i])
blue_wall_2010 <- append(blue_wall_2010, results_2010$Con[i] / results_2010$Total[i])
blue_wall_2015 <- append(blue_wall_2015, results_2015$Con[i] / results_2015$Total[i])
blue_wall_2017 <- append(blue_wall_2017, results_2017$Con[i] / results_2017$Total[i])
blue_wall_2019 <- append(blue_wall_2019, results_2019$Con[i] / results_2019$Total[i])
blue_wall_brexit <- append(blue_wall_brexit, results_brexit$Leave[i])
}
}
# Convert Brexit data to be numeric
blue_wall_brexit <- as.numeric(blue_wall_brexit)
# Store all the Blue Wall data into a data frame
blue_wall <- data.frame('Constituency' = blue_wall_seats, 'Region' = blue_wall_region, 'Con 2010' = round(blue_wall_2010, 4), 'Con 2015' = round(blue_wall_2015, 4), 'Con 2017' = round(blue_wall_2017, 4),
'Con 2019' = round(blue_wall_2019, 4), 'Leave vote' = round(blue_wall_brexit, 4))
return(blue_wall)
}
blue_wall_builder
blue_wall_builder()
blue_wall_builder(new_map = FALSE)
# Build the Blue Walls for both of the electoral maps
blue_wall_old <- blue_wall_builder(new_map = FALSE)
blue_wall_new <- blue_wall_builder(new_map = TRUE)
source("~/Project/Election Data/Blue Wall/Blue Wall Seats Code.R", echo=TRUE)
setwd("~/Project/Election Data/Blue Wall")
source("~/Project/Election Data/Blue Wall/Blue Wall Seats Code.R", echo=TRUE)
setwd("~/Project/Election Data/Blue Wall")
# Load required packages
library(readxl)
library(ggplot2)
# Load in original general election results
results_2010 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2024')
# Load in the two Blue Walls
blue_wall_old <- read_excel('Blue Wall Seats.xlsx', sheet = 'Old Boundaries')
blue_wall_new <- read_excel('Blue Wall Seats.xlsx', sheet = 'New Boundaries')
# Remove data from constituencies not in the Blue Wall
blue_wall_2010 <- results_2010[results_2010$Constituency %in% blue_wall_old$Constituency, ]
blue_wall_2015 <- results_2015[results_2015$Constituency %in% blue_wall_old$Constituency, ]
blue_wall_2017 <- results_2017[results_2017$Constituency %in% blue_wall_old$Constituency, ]
blue_wall_2019 <- results_2019[results_2019$Constituency %in% blue_wall_old$Constituency, ]
blue_wall_2024 <- results_2024[results_2024$Constituency %in% blue_wall_new$Constituency, ]
# Compute the vote shares for each constituency in the Blue Wall for Con, Lab, LD in 2010
bw_2010 <- data.frame(matrix(nrow = 37, ncol = 0))
bw_2010$Constituency <- blue_wall_2010$Constituency
bw_2010$Con <- blue_wall_2010$Con / blue_wall_2010$Total * 100
bw_2010$Lab <- blue_wall_2010$Lab / blue_wall_2010$Total * 100
bw_2010$LD <- blue_wall_2010$LD / blue_wall_2010$Total * 100
# Compute the vote shares for each constituency in the Blue Wall for Con, Lab, LD in 2015
bw_2015 <- data.frame(matrix(nrow = 37, ncol = 0))
bw_2015$Constituency <- blue_wall_2010$Constituency
bw_2015$Con <- blue_wall_2015$Con / blue_wall_2015$Total * 100
bw_2015$Lab <- blue_wall_2015$Lab / blue_wall_2015$Total * 100
bw_2015$LD <- blue_wall_2015$LD / blue_wall_2015$Total * 100
# Compute the vote shares for each constituency in the Blue Wall for Con, Lab, LD in 2017
bw_2017 <- data.frame(matrix(nrow = 37, ncol = 0))
bw_2017$Constituency <- blue_wall_2010$Constituency
bw_2017$Con <- blue_wall_2017$Con / blue_wall_2017$Total * 100
bw_2017$Lab <- blue_wall_2017$Lab / blue_wall_2017$Total * 100
bw_2017$LD <- blue_wall_2017$LD / blue_wall_2017$Total * 100
# Compute the vote shares for each constituency in the Blue Wall for Con, Lab, LD in 2019
bw_2019 <- data.frame(matrix(nrow = 37, ncol = 0))
bw_2019$Constituency <- blue_wall_2010$Constituency
bw_2019$Con <- blue_wall_2019$Con / blue_wall_2019$Total * 100
bw_2019$Lab <- blue_wall_2019$Lab / blue_wall_2019$Total * 100
bw_2019$LD <- blue_wall_2019$LD / blue_wall_2019$Total * 100
# Compute the vote shares for each constituency in the Blue Wall for Con, Lab, LD in 2024
bw_2024 <- data.frame(matrix(nrow = 40, ncol = 0))
bw_2024$Constituency <- blue_wall_2024$Constituency
bw_2024$Con <- blue_wall_2024$Con / blue_wall_2024$Total * 100
bw_2024$Lab <- blue_wall_2024$Lab / blue_wall_2024$Total * 100
bw_2024$LD <- blue_wall_2024$LD / blue_wall_2024$Total * 100
setwd("~/Project/Election Data/Blue Wall")
source("~/Project/Election Data/Blue Wall/Blue Wall Vote Share Plot.R", echo=TRUE)
setwd("~/Project/Election Data/Blue Wall")
# Load in the original general election results
# Note we load in the 2019 results on the 2024 electoral map as well in order to compare swing in vote for 2024
results_2010 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2010')
results_2015 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2015')
results_2017 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2017')
results_2019 <- read_excel('~/Project/Election Data/Election Results/Election Results.xlsx', sheet = '2019')
results_2024 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2024')
results_2019_new <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2019')
# Load in the Blue Walls
blue_wall_old <- read_excel('Blue Wall Seats.xlsx', sheet = 'Old Boundaries')
blue_wall_new <- read_excel('Blue Wall Seats.xlsx', sheet = 'New Boundaries')
# Remove constituencies not in the Blue Wall
bw_2019 <- results_2019[results_2019$Constituency %in% blue_wall_new$Constituency, ]
bw_2024 <- results_2024[results_2024$Constituency %in% blue_wall_new$Constituency, ]
test <- results_2024$Lab / results_2024$Total - results_2019_new$Lab / results_2019_new$Total
test[227]
bw_con_swing <- bw_2024$Con / bw_2024$Total - bw_2019$Con / bw_2019$Total
bw_lab_swing <- bw_2024$Lab / bw_2024$Total - bw_2019$Lab / bw_2019$Total
bw_ld_swing <- bw_2024$LD / bw_2024$Total - bw_2019$LD / bw_2019$Total
# Load in the required general election results
results_2019 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2019')
results_2024 <- read_excel('~/Project/Election Data/Election Results/Election Results New Boundaries.xlsx', sheet = '2024')
# Load in the Blue Wall on the 2024 electoral map
blue_wall_new <- read_excel('Blue Wall Seats.xlsx', sheet = 'New Boundaries')
# Remove constituencies not in the Blue Wall
bw_2019 <- results_2019[results_2019$Constituency %in% blue_wall_new$Constituency, ]
bw_2024 <- results_2024[results_2024$Constituency %in% blue_wall_new$Constituency, ]
bw_con_swing <- bw_2024$Con / bw_2024$Total - bw_2019$Con / bw_2019$Total
bw_lab_swing <- bw_2024$Lab / bw_2024$Total - bw_2019$Lab / bw_2019$Total
bw_ld_swing <- bw_2024$LD / bw_2024$Total - bw_2019$LD / bw_2019$Total
con_outliers <- bw_2024[!(lower_con < bw_con_swing & bw_con_swing < upper), ]
# Compute the upper and lower bounds for potential outliers for each party
lower_con <- mean_swing_con - 2 * sd_swing_con
# Average vote swing in England for each party
mean_swing_con <- mean(results_2024$Con / results_2024$Total - results_2019$Con / results_2019$Total)
mean_swing_lab <- mean(results_2024$Lab / results_2024$Total - results_2019$Lab / results_2019$Total)
mean_swing_ld <- mean(results_2024$LD / results_2024$Total - results_2019$LD / results_2019$Total)
# Standard deviation of vote swing in England for each party
sd_swing_con <- sd(results_2024$Con / results_2024$Total - results_2019$Con / results_2019$Total)
sd_swing_lab <- sd(results_2024$Lab / results_2024$Total - results_2019$Lab / results_2019$Total)
sd_swing_ld <- sd(results_2024$LD / results_2024$Total - results_2019$LD / results_2019$Total)
# Compute the upper and lower bounds for potential outliers for each party
lower_con <- mean_swing_con - 2 * sd_swing_con
lower_lab <- mean_swing_lab - 2 * sd_swing_lab
lower_ld <- mean_swin_ld - 2 * sd_swing_ld
upper_con <- mean_swing_con + 2 * sd_swing_con
upper_lab <- mean_swing_lab + 2 * sd_swing_lab
lower_ld <- mean_swing_ld - 2 * sd_swing_ld
upper_con <- mean_swing_con + 2 * sd_swing_con
upper_lab <- mean_swing_lab + 2 * sd_swing_lab
upper_ld <- mean_swing_ld + 2 * sd_swing_ld
con_outliers <- bw_2024[!(lower_con < bw_con_swing & bw_con_swing < upper), ]
con_outliers <- bw_2024[!(lower_con < bw_con_swing & bw_con_swing < upper_con), ]
con_outliers[con_outliers$Constituency %in% blue_wall_new$Constituency, ]
lab_outliers <- bw_2024[!(lower_lab < bw_lab_swing & bw_lab_swing < upper_lab),]
lab_outliers[lab_outliers$Constituency %in% blue_wall_new$Constituency, ]
ld_outliers <- bw_2024[!(lower_ld < bw_ld_swing & bw_ld_swing < upper_ld),]
ld_outliers[ld_outliers$Constituency %in% blue_wall_new$Constituency, ]
con_outliers
lab_outliers
ld_outliers
